metadata:
  id: "deploy-filebrowser"
  name: "File Browser"
  description: "File Browser provides a web interface to manage files and folders"
  author: "Nixopus Team"
  icon: "üóÇÔ∏è"
  category: "Storage"
  type: "install"
  version: "1.0.0"
  isVerified: false

variables:
  image:
    type: "string"
    description: "Docker image for File Browser"
    default: "filebrowser/filebrowser"
    is_required: true

  tag:
    type: "string"
    description: "Docker image tag"
    default: "latest"
    is_required: true

  container_name:
    type: "string"
    description: "Name of the File Browser container"
    default: "filebrowser"
    is_required: true

  host_port:
    type: "integer"
    description: "Host port to expose File Browser"
    default: 8080
    is_required: true

  data_volume:
    type: "string"
    description: "Named Docker volume for /srv"
    default: "filebrowser_data"
    is_required: true

  db_volume:
    type: "string"
    description: "Named Docker volume for /database"
    default: "filebrowser_database"
    is_required: true

  config_volume:
    type: "string"
    description: "Named Docker volume for /config"
    default: "filebrowser_config"
    is_required: true

execution:
  run:
    - name: "Pull File Browser image"
      type: "docker"
      properties:
        action: "pull"
        image: "{{ image }}"
        tag: "{{ tag }}"
      timeout: 300

    - name: "Run File Browser container"
      type: "docker"
      properties:
        action: "run"
        name: "{{ container_name }}"
        image: "{{ image }}"
        tag: "{{ tag }}"
        ports: "{{ host_port }}:80"
        restart: "unless-stopped"
        volumes:
          - "{{ data_volume }}:/srv"
          - "{{ db_volume }}:/database"
          - "{{ config_volume }}:/config"
      timeout: 180

  validate:
    - name: "Check HTTP response from File Browser"
      type: "command"
      properties:
        cmd: "sh -c 'for i in $(seq 1 30); do code=$(curl -fsS -o /dev/null -w \"%{http_code}\\n\" http://localhost:{{ host_port }} || true); echo \"HTTP $code\"; echo $code | grep -E \"^(200|301|302)$\" && exit 0; sleep 2; done; exit 1'"
      timeout: 60


