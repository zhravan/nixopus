version: "3.8"

services:
  nixopus-staging-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: nixopus-staging-api
    ports:
      - "${API_PORT:-8443}:${API_PORT:-8443}"
    restart: unless-stopped
    env_file:
      - ${NIXOPUS_HOME:-/etc/nixopus}/source/api/.env
    environment:
      - HOST_NAME=nixopus-staging-db
    volumes:
      - ./logs:/app/logs
      - ${NIXOPUS_HOME:-/etc/nixopus}:/etc/nixopus
      - /var/run/docker.sock:/var/run/docker.sock
      - ${NIXOPUS_HOME:-/etc/nixopus}/source/api/.env:/app/.env
    networks:
      - nixopus-network
    depends_on:
      nixopus-staging-db:
        condition: service_healthy

  nixopus-staging-db:
    image: postgres:14-alpine
    container_name: nixopus-staging-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${USERNAME}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - ${NIXOPUS_HOME:-/etc/nixopus}/db:/var/lib/postgresql/data
    networks:
      - nixopus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERNAME} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  nixopus-staging-view:
    build:
      context: ./view
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_PORT=${NEXT_PUBLIC_PORT}
    container_name: nixopus-staging-view
    ports:
      - "${NEXT_PUBLIC_PORT:-7443}:${NEXT_PUBLIC_PORT:-7443}"
    restart: unless-stopped
    env_file:
      - ${NIXOPUS_HOME:-/etc/nixopus}/source/view/.env
    volumes:
      - ./logs:/app/logs
      - ${NIXOPUS_HOME:-/etc/nixopus}/source/view/.env:/app/.env
    networks:
      - nixopus-network

  nixopus-staging-caddy:
    image: caddy:latest
    container_name: nixopus-staging-caddy
    ports:
      - "2019:2019"
      - "80:80"
      - "443:443"
    volumes:
      - ${NIXOPUS_HOME:-/etc/nixopus}/source/helpers/Caddyfile:/etc/caddy/Caddyfile
      - ${NIXOPUS_HOME:-/etc/nixopus}/caddy:/data
      - ${NIXOPUS_HOME:-/etc/nixopus}/caddy:/config
    command:
      [
        "caddy",
        "run",
        "--config",
        "/etc/caddy/Caddyfile",
        "--adapter",
        "caddyfile"
      ]
    networks:
      - nixopus-network

networks:
  nixopus-network:
    driver: bridge
